<%@ page import="java.sql.*"%>
<%@ page import="java.util.*"%>
<%@ page import="ftc.util.*"%>

<%@ page import="ftc.db.ConnectionResource"%>
<%@ page import="ftc.db.ConnectionResource2"%>

<%@ include file="/hado/wTools/inc/WB_I_Global.jsp"%>
<%@ include file="/hado/wTools/inc/WB_I_chkMngSession.jsp"%>

<%@ page import="java.text.DecimalFormat"%>

<%
/* -- Product Notice ----------------------------------------------------------------------------------*/
/*  1. 프로젝트명 : 공정관리위원회 하도급거래 서면직권실태조사					                       */
/*  2. 업체정보 :																					   */
/*     - 업체명 : (주)로티스아이																	   */
/*	   - Project Manamger : 정광식 부장 (pcxman99@naver.com)										   */
/*     - 연락처 : T) 031-902-9188 F) 031-902-9189 H) 010-8329-9909									   */
/*  3. 일자 : 2009년 5월																			   */
/*  4. 최초작성자 및 일자 : (주)로티스아이 정광식 / 2011-10-18										   */
/*  5. 업데이트내용 (내용 / 일자)																	   */
/*  6. 비고																							   */
/*		1) 웹관리툴 리뉴얼 / 2011-12-06																   */
/*-----------------------------------------------------------------------------------------------------*/

/*---------------------------------------- Variable Difinition ----------------------------------------*/
	String sErrorMsg="";	// 오류메시지
	String sReturnURL="/index.jsp";	// 이동URL
	
	ConnectionResource resource=null;
	Connection conn=null;
	PreparedStatement pstmt=null;
	ResultSet rs=null;
	
	String stt=StringUtil.checkNull(request.getParameter("tt"));
	String comm=StringUtil.checkNull(request.getParameter("comm"));

	String sSQLs="";

	String[] otype=new String[101];
	String[] type_cd=new String[101];
	Long[] type_cnt=new Long[101];
	Long[] subcon_cnt=new Long[101];
	Long[][] violate_cnt=new Long[101][15];
	Long[] tot_violate=new Long[15];
	String[] cnt_col=new String[15];
	Long[] typ_vio_cnt=new Long[101];

	int otype_cnt=0;
	int ni=0;

	Long tot_type=new Long(0);
	Long tot_subcon=new Long(0);
	Long tot_typ_vio=new Long(0);

	// 위반 쿼리 생성을 위한 배열
	//==> 대금
	ArrayList arrQCD1=new ArrayList();
	ArrayList arrQGB1=new ArrayList();
	ArrayList arrCDNM1=new ArrayList();
	ArrayList arrMoneyGB1=new ArrayList();
	ArrayList arrIDT_QCD1=new ArrayList();
	ArrayList arrIDT_QGB1=new ArrayList();
	//==> 비대금
	ArrayList arrQCD2=new ArrayList();
	ArrayList arrQGB2=new ArrayList();
	ArrayList arrCDNM2=new ArrayList();
	ArrayList arrMoneyGB2=new ArrayList();
	ArrayList arrIDT_QCD2=new ArrayList();
	ArrayList arrIDT_QGB2=new ArrayList();

	// 쿼리 저장 배열
	String sAllSurveySQL="";
	String sAllSumSQL="";
	String sMoneySumSQL="";
	String sBiSumSQL="";
	String sSurveySQL="";

	int sStartYear=2000;

	java.util.Calendar cal=java.util.Calendar.getInstance();

	DecimalFormat formater=new java.text.DecimalFormat("###,###,###,###,###,###,###,##0.0");
	DecimalFormat formater2=new java.text.DecimalFormat("###,###,###,###,###,###,###,##0");
/*-----------------------------------------------------------------------------------------------------*/
/*=================================== Record SELECTion Processing =====================================*/
	
	int currentYear=st_Current_Year_n;

	String tmpYear=StringUtil.checkNull(request.getParameter("cyear")).trim();

	if( !tmpYear.equals("") ) {
		session.setAttribute("cyear", tmpYear);
	} else {
		session.setAttribute("cyear", st_Current_Year);
	}

	currentYear=Integer.parseInt(session.getAttribute("cyear")+"");

	int endCurrentYear=st_Current_Year_n;

	// view table name
	String currentOent = currentYear==2012 ? "HADO_TB_Oent_2012" : "HADO_TB_Oent";
	String currentAnswer = currentYear==2012 ? "HADO_TB_Oent_Answer_2012" : "HADO_TB_Oent_Answer";
	

	session.setAttribute("wgb", StringUtil.checkNull(request.getParameter("wgb")).trim());
	String sGB=StringUtil.checkNull(request.getParameter("wgb")).trim();
	String sCapa=StringUtil.checkNull(request.getParameter("wcapa")).trim();
	String sTradeST=StringUtil.checkNull(request.getParameter("tradest")).trim();
	String moneyStatus=StringUtil.checkNull(request.getParameter("cstatus")).trim();
	

	// 초기화
	for(int i=1; i<=100; i++) { 
		type_cnt[i]=new Long(0); 
		subcon_cnt[i]=new Long(0); 
		typ_vio_cnt[i]=new Long(0); 
		for(int j=1; j<=14;j++) {
			violate_cnt[i][j]=new Long(0);
		}
	}
	for(int i=1; i<=11; i++) { 
		tot_violate[i]=new Long(0); 
	}

	try {
		resource=new ConnectionResource();
		conn=resource.getConnection();

/********************************************************************************************************/
/********************************************************************************************************/
/********************************************************************************************************/
		sSQLs="SELECT Common_CD, (Common_CD || '(' || Common_NM || ')') as_Type FROM Common_CD \n";  
		sSQLs+="WHERE  Addon_GB='"+sGB+"' ";  
		if( currentYear==2012 ) 
			sSQLs+="AND COMMON_GB='010' \n";
		else
			sSQLs+="AND COMMON_GB='002' \n";  
		sSQLs+="ORDER BY Common_CD \n";  

		//System.out.print(sSQLs);
		pstmt=conn.prepareStatement(sSQLs);
		rs=pstmt.executeQuery();
		
		otype_cnt = 1;
		while( rs.next() ) {
			otype[otype_cnt] = new String( StringUtil.checkNull(rs.getString("as_type")).trim().getBytes("ISO8859-1"), "EUC-KR" );
			type_cd[otype_cnt] = rs.getString("common_cd");
			otype_cnt++;
		}
		rs.close();
		otype_cnt--;


		// Oent Type Count
		sSQLs="SELECT A.Common_CD, NVL(B.Oent_Cnt,0) CNT FROM ( \n";  
		sSQLs+="	SELECT Common_CD FROM Common_CD  WHERE Addon_GB='"+sGB+"' \n";  
		if( currentYear==2012 ) 
			sSQLs+="	AND COMMON_GB='010' \n";
		else
			sSQLs+="	AND COMMON_GB='002' \n";  
		sSQLs+=") A LEFT JOIN ( \n";  
		sSQLs+="	SELECT COUNT(Mng_No) Oent_Cnt, Oent_Type FROM "+currentOent+" \n";  
		sSQLs+="	WHERE Oent_Status='1' \n";  
		sSQLs+="	AND Oent_GB='"+sGB+"' AND Current_Year='"+currentYear+"' \n";  
		if( currentYear>=2011 ) {
			sSQLs+="	AND Addr_Status IS NULL AND length(mng_no)>4 \n";  
		} else {
			sSQLs+="	AND Addr_Status IS NULL AND SUBSTR(Mng_No,-7)<>'1234567' \n";  
		}
		if( !sCapa.equals("") ) {
			sSQLs+="	AND Oent_Capa='"+sCapa+"' \n";	
		}
		sSQLs+="	GROUP BY Oent_Type \n";  
		sSQLs+=") B ON B.Oent_Type=A.Common_CD \n";  
		sSQLs+="ORDER BY A.Common_CD \n";

		//System.out.print(sSQLs);

		pstmt=conn.prepareStatement(sSQLs);
		rs=pstmt.executeQuery();

		ni=1;
		while( rs.next() ) {
			type_cnt[ni]=rs.getLong("CNT");
			tot_type=tot_type + type_cnt[ni];
			ni++;
		}
		rs.close();

		// Subcon Count
		sSQLs="SELECT A.Common_CD, NVL(B.SubCon_Cnt,0) CNT FROM ( \n";  
		sSQLs+="	SELECT Common_CD FROM Common_CD  WHERE Addon_GB='"+sGB+"' \n";  
		if( currentYear==2012 ) 
			sSQLs+="	AND COMMON_GB='010' \n";
		else
			sSQLs+="	AND COMMON_GB='002' \n";  
		sSQLs+=") A LEFT JOIN (";
		sSQLs+="	SELECT Oent_Type, COUNT(Mng_No) Subcon_Cnt FROM "+currentOent+" \n";  
		sSQLs+="	WHERE Oent_Status='1' AND Comp_Status='1' and Subcon_Type <='2' ";	
		sSQLs+="	AND Oent_GB='"+sGB+"' AND Current_Year='"+currentYear+"' \n";  
		if( currentYear>=2011 ) {
			sSQLs+="	AND Addr_Status IS NULL AND length(mng_no)>4 \n";  
		} else {
			sSQLs+="	AND Addr_Status IS NULL AND SUBSTR(Mng_No,-7)<>'1234567' \n";  
		}
		if( !sCapa.equals("") ) {
			sSQLs+="	AND Oent_Capa='"+sCapa+"' \n";	
		}
		sSQLs+="	GROUP BY Oent_Type \n";
		sSQLs+=") B ON B.Oent_Type=A.Common_CD \n";  
		sSQLs+="ORDER BY A.Common_CD \n";

		pstmt=conn.prepareStatement(sSQLs);
		rs=pstmt.executeQuery();

		//System.out.print(sSQLs);

		ni=1;
		while( rs.next() ) {
			subcon_cnt[ni]=rs.getLong("CNT");
			tot_subcon=tot_subcon + subcon_cnt[ni];
			ni++;
		}
		rs.close();


		sSQLs ="SELECT Oent_Q_CD,Oent_Q_GB,Oent_Q_CDNM,Money_GB,IDentity_Q_CD,IDentity_Q_GB \n";
		sSQLs+="FROM HADO_TB_Oent_Question \n";
		sSQLs+="WHERE Current_Year='"+currentYear+"' \n";
		sSQLs+="	AND Oent_GB='"+sGB+"' \n";
		sSQLs+="	AND (Money_GB='1' OR Money_GB='2') \n";
		sSQLs+="ORDER BY Money_GB,Rank \n";

		pstmt=conn.prepareStatement(sSQLs);
		rs=pstmt.executeQuery();
		
		while( rs.next() ) {
			String tmp_MoneyGB=rs.getString("Money_GB").trim();
		
			if( tmp_MoneyGB.equals("1") ) {
				arrQCD1.add(rs.getString("Oent_Q_CD"));
				arrQGB1.add(rs.getString("Oent_Q_GB"));
				arrCDNM1.add(new String(rs.getString("Oent_Q_CDNM").trim().getBytes("ISO8859-1"), "EUC-KR"));
				arrMoneyGB1.add(tmp_MoneyGB);
				arrIDT_QCD1.add(rs.getString("Identity_Q_CD"));
				arrIDT_QGB1.add(rs.getString("Identity_Q_GB"));
			} else {
				arrQCD2.add(rs.getString("Oent_Q_CD"));
				arrQGB2.add(rs.getString("Oent_Q_GB"));
				arrCDNM2.add(new String(rs.getString("Oent_Q_CDNM").trim().getBytes("ISO8859-1"), "EUC-KR"));
				arrMoneyGB2.add(tmp_MoneyGB);
				arrIDT_QCD2.add(rs.getString("Identity_Q_CD"));
				arrIDT_QGB2.add(rs.getString("Identity_Q_GB"));
			}
		}
		rs.close();

		/* 쿼리 생성 시작 */
		String tmp_IDT_QCD="";
		String tmp_IDT_QGB="";
		String prev_QCD="";
		String prev_QGB="";
		String tmp_Duble="F";
		int nWriteCnt=0;
		for(int i=0; i<arrQCD1.size(); i++) {
			if( !(tmp_IDT_QCD.equals(arrIDT_QCD1.get(i)+"") && tmp_IDT_QGB.equals(arrIDT_QGB1.get(i)+"")) ) {
				if( !sAllSumSQL.equals("") ) { 
					sAllSumSQL+="+";
					sMoneySumSQL+="+";
					sAllSurveySQL+=", ";
				}
				sAllSumSQL+="SUM(NVL(cnt_"+arrQCD1.get(i)+arrQGB1.get(i)+",0))";
				sMoneySumSQL+="SUM(NVL(cnt_"+arrQCD1.get(i)+arrQGB1.get(i)+",0))";
				sAllSurveySQL+="SUM(NVL(cnt_"+arrQCD1.get(i)+arrQGB1.get(i)+",0))";

				nWriteCnt++;
			} else {
				tmp_Duble="T";
				nWriteCnt=0;
			}

			if( tmp_Duble.equals("T") ) {
				if( !sSurveySQL.equals("") ) { sSurveySQL+=", \n"; }
				sSurveySQL+="CASE SUM(CASE Oent_Q_CD WHEN "+prev_QCD+" THEN CASE WHEN Oent_Q_GB IN ("+prev_QGB+","+arrQGB1.get(i)+") THEN 1 ELSE 0 END ELSE 0 END) WHEN 2 THEN 1 WHEN 1 THEN 1 ELSE 0 END cnt_"+prev_QCD+prev_QGB;
				tmp_Duble="F";
			} else if( nWriteCnt==2 ) {
				if( !sSurveySQL.equals("") ) { sSurveySQL+=", \n"; }
				sSurveySQL+="SUM(CASE Oent_Q_CD WHEN "+prev_QCD+" THEN CASE Oent_Q_GB WHEN "+prev_QGB+" THEN 1 ELSE 0 END ELSE 0 END) cnt_"+prev_QCD+prev_QGB;
				nWriteCnt=1;
			}

			tmp_IDT_QCD=arrIDT_QCD1.get(i)+"";
			tmp_IDT_QGB=arrIDT_QGB1.get(i)+"";
			prev_QCD=arrQCD1.get(i)+"";
			prev_QGB=arrQGB1.get(i)+"";
		}
		if( tmp_Duble.equals("T") ) {
			if( !sSurveySQL.equals("") ) { sSurveySQL+=", \n"; }
			sSurveySQL+="CASE SUM(CASE Oent_Q_CD WHEN "+prev_QCD+" THEN CASE WHEN Oent_Q_GB IN ("+prev_QGB+","+arrQGB1.get(arrQCD1.size()-1)+") THEN 1 ELSE 0 END ELSE 0 END) WHEN 2 THEN 1 WHEN 1 THEN 1 ELSE 0 END cnt_"+prev_QCD+prev_QGB;
		} else {
			if( !sSurveySQL.equals("") ) { sSurveySQL+=", \n"; }
			sSurveySQL+="SUM(CASE Oent_Q_CD WHEN "+prev_QCD+" THEN CASE Oent_Q_GB WHEN "+prev_QGB+" THEN 1 ELSE 0 END ELSE 0 END) cnt_"+prev_QCD+prev_QGB;
		}
		
		prev_QCD="";
		prev_QGB="";
		tmp_Duble="F";
		nWriteCnt=0;
		for(int i=0; i<arrQCD2.size(); i++) {
			if( !(tmp_IDT_QCD.equals(arrIDT_QCD2.get(i)+"") && tmp_IDT_QGB.equals(arrIDT_QGB2.get(i)+"")) ) {
				if( !sAllSumSQL.equals("") ) { sAllSumSQL+="+"; sAllSurveySQL+=", ";  }
				if( !sBiSumSQL.equals("") ) { sBiSumSQL+="+"; }
				sAllSumSQL+="SUM(NVL(cnt_"+arrQCD2.get(i)+arrQGB2.get(i)+",0))";
				sBiSumSQL+="SUM(NVL(cnt_"+arrQCD2.get(i)+arrQGB2.get(i)+",0))";
				sAllSurveySQL+="SUM(NVL(cnt_"+arrQCD2.get(i)+arrQGB2.get(i)+",0))";
				nWriteCnt++;
			} else {
				tmp_Duble="T";
				nWriteCnt=0;
			}
			
			if( tmp_Duble.equals("T") ) {
				if( !sSurveySQL.equals("") ) { sSurveySQL+=", \n"; }
				sSurveySQL+="CASE SUM(CASE Oent_Q_CD WHEN "+prev_QCD+" THEN CASE WHEN Oent_Q_GB IN ("+prev_QGB+","+arrQGB2.get(i)+") THEN 1 ELSE 0 END ELSE 0 END) WHEN 2 THEN 1 WHEN 1 THEN 1 ELSE 0 END cnt_"+prev_QCD+prev_QGB;
				tmp_Duble="F";
			} else if( nWriteCnt==2 ) {
				if( !sSurveySQL.equals("") ) { sSurveySQL+=", \n"; }
				sSurveySQL+="SUM(CASE Oent_Q_CD WHEN "+prev_QCD+" THEN CASE Oent_Q_GB WHEN "+prev_QGB+" THEN 1 ELSE 0 END ELSE 0 END) cnt_"+prev_QCD+prev_QGB;
				nWriteCnt=1;
			}

			tmp_IDT_QCD=arrIDT_QCD2.get(i)+"";
			tmp_IDT_QGB=arrIDT_QGB2.get(i)+"";
			prev_QCD=arrQCD2.get(i)+"";
			prev_QGB=arrQGB2.get(i)+"";
		}
		if( tmp_Duble.equals("T") ) {
			if( !sSurveySQL.equals("") ) { sSurveySQL+=", \n"; }
			sSurveySQL+="CASE SUM(CASE Oent_Q_CD WHEN "+prev_QCD+" THEN CASE WHEN Oent_Q_GB IN ("+prev_QGB+","+arrQGB2.get(arrQCD2.size()-1)+") THEN 1 ELSE 0 END ELSE 0 END) WHEN 2 THEN 1 WHEN 1 THEN 1 ELSE 0 END cnt_"+prev_QCD+prev_QGB;
		} else {
			if( !sSurveySQL.equals("") ) { sSurveySQL+=", \n"; }
			sSurveySQL+="SUM(CASE Oent_Q_CD WHEN "+prev_QCD+" THEN CASE Oent_Q_GB WHEN "+prev_QGB+" THEN 1 ELSE 0 END ELSE 0 END) cnt_"+prev_QCD+prev_QGB;
		}

/********************************************************************************************************/
/********************************************************************************************************/
/********************************************************************************************************/

		sSQLs="SELECT Mng_No, Oent_Type, Oent_GB, \n";
		sSQLs+="CASE "+sAllSumSQL+" WHEN 1 THEN 1 ELSE 0 END cnt_one, \n";
		sSQLs+="CASE "+sAllSumSQL+" WHEN 2 THEN 1 ELSE 0 END cnt_two, \n";
		sSQLs+="CASE "+sAllSumSQL+" WHEN 3 THEN 1 ELSE 0 END cnt_three, \n";
		sSQLs+="CASE "+sAllSumSQL+" WHEN 4 THEN 1 ELSE 0 END cnt_four, \n";
		sSQLs+="CASE "+sAllSumSQL+" WHEN 5 THEN 1 ELSE 0 END cnt_five, \n";
		sSQLs+="CASE "+sAllSumSQL+" WHEN 6 THEN 1 ELSE 0 END cnt_six, \n";
		sSQLs+="CASE "+sAllSumSQL+" WHEN 7 THEN 1 ELSE 0 END cnt_seven, \n";
		sSQLs+="CASE "+sAllSumSQL+" WHEN 8 THEN 1 ELSE 0 END cnt_eight, \n";
		sSQLs+="CASE "+sAllSumSQL+" WHEN 9 THEN 1 ELSE 0 END cnt_nine, \n";
		sSQLs+="CASE "+sAllSumSQL+" WHEN 10 THEN 1 ELSE 0 END cnt_ten, \n";
		sSQLs+="CASE WHEN "+sAllSumSQL+" >10 THEN 1 ELSE 0 END cnt_etc \n";
		sSQLs+="FROM ( \n";
		sSQLs+="	SELECT Mng_No, Oent_Type, Oent_GB, \n";	
		sSQLs+="	"+sSurveySQL+" \n";	
		sSQLs+="	FROM ( \n";	
		sSQLs+="		SELECT AA.Mng_No, AA.Oent_GB ,AA.Oent_Q_CD, AA.Oent_Q_GB, \n";	
		sSQLs+="			BB.Oent_Type, BB.Oent_Name, BB.Oent_Capa, BB.TradeST, AA.Money_GB, \n";		
		sSQLs+="			BB.Comp_Status, BB.Oent_Status, BB.Subcon_Type, BB.Addr_Status \n";	
		sSQLs+="		FROM ( \n";	
		sSQLs+="			SELECT Mng_No,Current_Year,Oent_GB,Oent_Q_CD,Oent_Q_GB,Money_GB  \n";	
		sSQLs+="			FROM ( \n";	
		sSQLs+="				SELECT A.Mng_No,A.Current_Year,A.Oent_GB,A.Oent_Q_CD,A.Oent_Q_GB, \n";	
		sSQLs+="				CASE B.Oent_GB WHEN A.Oent_GB THEN '1' ELSE '0' END CHKs, \n";	
		sSQLs+="                B.Money_GB \n";	
		sSQLs+="				FROM ( \n";	
		sSQLs+="					SELECT *  \n";	
		sSQLs+="						FROM "+currentAnswer+" \n";	
		sSQLs+="						WHERE Current_Year='"+currentYear+"' \n";	
		sSQLs+="						AND Oent_GB='"+sGB+"' \n";	
		sSQLs+="				) A LEFT JOIN ( \n";	
		sSQLs+="					SELECT * \n";	
		sSQLs+="					FROM HADO_TB_Oent_Question \n";	
		sSQLs+="					WHERE Current_Year='"+currentYear+"' \n";	
		sSQLs+="					AND Oent_GB='"+sGB+"' \n";	
		sSQLs+="				) B \n";	
		sSQLs+="				ON A.Oent_GB=B.Oent_GB \n";	
		sSQLs+="				AND A.Oent_Q_CD=B.Oent_Q_CD \n";	
		sSQLs+="				AND A.Oent_Q_GB=B.Oent_Q_GB \n";	
		sSQLs+="				AND A.Current_Year=B.Current_Year \n";	
		sSQLs+="				AND ( NVL(A.A,'2')=NVL(B.CHK_V_A,'3') \n";	
		sSQLs+="					OR NVL(A.B,'2')=NVL(B.CHK_V_B,'3') \n";	
		sSQLs+="					OR NVL(A.C,'2')=NVL(B.CHK_V_C,'3') \n";	
		sSQLs+="					OR NVL(A.D,'2')=NVL(B.CHK_V_D,'3') \n";	
		sSQLs+="					OR NVL(A.E,'2')=NVL(B.CHK_V_E,'3') \n";	
		sSQLs+="					OR NVL(A.F,'2')=NVL(B.CHK_V_F,'3') \n";	
		sSQLs+="					OR NVL(A.G,'2')=NVL(B.CHK_V_G,'3') \n";	
		sSQLs+="					OR NVL(A.H,'2')=NVL(B.CHK_V_H,'3') \n";	
		sSQLs+="					OR NVL(A.I,'2')=NVL(B.CHK_V_I,'3') \n";	
		sSQLs+="					OR NVL(A.J,'2')=NVL(B.CHK_V_J,'3') \n";	
		sSQLs+="					OR NVL(A.K,'2')=NVL(B.CHK_V_K,'3') \n";	
		sSQLs+="					OR NVL(A.L,'2')=NVL(B.CHK_V_L,'3') \n";	
		sSQLs+="					OR NVL(A.M,'2')=NVL(B.CHK_V_M,'3') \n";	
		sSQLs+="					OR NVL(A.N,'2')=NVL(B.CHK_V_N,'3') ) \n";	
		sSQLs+="			) OentAnswer_Result \n";	
		sSQLs+="			WHERE CHKs='1' \n";	
		sSQLs+="			GROUP BY Mng_No, Current_Year, Oent_GB, Oent_Q_CD, Oent_Q_GB, Money_GB \n";	
		sSQLs+="		) AA LEFT JOIN ( \n";	
		sSQLs+="			SELECT Mng_No, Current_Year, Oent_GB, Oent_Type, Oent_Capa, \n";	
		sSQLs+="			Oent_Name, Comp_Status, Oent_Status, Subcon_Type, Addr_Status, \n";	
		sSQLs+="			NVL(CASE Subcon_Type WHEN '1' THEN '0' ELSE \n";
        sSQLs+="				CASE WHEN SP_FLD_01 IS NULL OR SP_FLD_01='NULL' THEN '4' ELSE SP_FLD_01 END \n";
        sSQLs+="			END, 0) TradeST FROM "+currentOent+" \n";	
		sSQLs+="			WHERE Current_Year='"+currentYear+"' \n";	
		sSQLs+="			AND Oent_GB='"+sGB+"' \n";	
		sSQLs+="		) BB \n";	
		sSQLs+="		ON AA.Mng_No=BB.Mng_No \n";	
		sSQLs+="		AND AA.Current_Year=BB.Current_Year \n";	
		sSQLs+="		AND AA.Oent_GB=BB.Oent_GB \n";	
		sSQLs+="	) CCC \n";	
		sSQLs+="	WHERE Oent_Status='1' \n";	
		sSQLs+="	AND Comp_Status='1' \n";	
		sSQLs+="	AND Subcon_Type<='2' \n";	
		sSQLs+="	AND Addr_Status IS NULL \n";	
		sSQLs+="	AND SUBSTR(Mng_No,-7)<>'1234567' \n";
		sSQLs+="	AND LENGTH(Mng_No)>4 \n";
		if( !sCapa.equals("") ) {
			sSQLs+="	AND Oent_Capa='"+sCapa+"' \n";	
		}
		if( !sTradeST.equals("") ) {
			sSQLs+="	AND TradeST='"+sTradeST+"' \n";
		}
		if( !moneyStatus.equals("") ) {
			sSQLs+="	AND Money_GB='"+moneyStatus+"' \n";
		}
		sSQLs+="	GROUP BY Mng_No,Oent_GB,Oent_Type,Oent_Name \n";	
		sSQLs+=") vi_Temp \n";
		sSQLs+="GROUP BY Mng_No, Oent_Type, Oent_GB \n";
		sSQLs+="ORDER BY Oent_Type \n";	

		//out.print(sSQLs);
		
		pstmt=conn.prepareStatement(sSQLs);
		rs=pstmt.executeQuery();

		String cc="";
		String ptype="";
		int i=0;
		Long typ_vio=new Long(0);
		while( rs.next() ) {
			ptype=rs.getString("oent_type");
			if( !cc.equals(ptype) ) {
				if( i > 0 ) {
					if( cc.equals(type_cd[i]) ) {
						typ_vio_cnt[i]=typ_vio;
						tot_typ_vio=tot_typ_vio + typ_vio_cnt[i];
					} else {
						typ_vio_cnt[i]=new Long(0);
						for(int j=1; j<=11; j++) {
							violate_cnt[i+1][j]=violate_cnt[i][j];
							violate_cnt[i][j]=new Long(0);
						}
						i++;
						typ_vio_cnt[i]=typ_vio;
						tot_typ_vio=tot_typ_vio + typ_vio_cnt[i];
					}
				}
				i++;
				while( !type_cd[i].equals(ptype) ) i++;
				cc=ptype;
				typ_vio=new Long(0);
			}

			typ_vio++;
			cnt_col[1]="cnt_one";
			cnt_col[2]="cnt_two";
			cnt_col[3]="cnt_three";
			cnt_col[4]="cnt_four";
			cnt_col[5]="cnt_five";
			cnt_col[6]="cnt_six";
			cnt_col[7]="cnt_seven";
			cnt_col[8]="cnt_eight";
			cnt_col[9]="cnt_nine";
			cnt_col[10]="cnt_ten";
			cnt_col[11]="cnt_etc";

			String tmpStr="";
			for(int j=1; j<=11;j++) {
				tmpStr=rs.getString(cnt_col[j]);
				if( tmpStr != null ) {
					//violate_cnt[i][j]=violate_cnt[i][j] + 1;
					//tot_violate[j]=tot_violate[j] + 1;
					violate_cnt[i][j]=rs.getLong(cnt_col[j]);
					tot_violate[j]+=violate_cnt[i][j];
				}
			}
		}
		rs.close();

		typ_vio_cnt[i]=typ_vio;
		tot_typ_vio=tot_typ_vio + typ_vio_cnt[i];

		if( i < 28 ) {
			for(int l=i+1; l<=28; l++) {
				typ_vio_cnt[l]=new Long(0);
				for(int j=1; j<=11;j++) {
					violate_cnt[l][j]=new Long(0);
				}
			}
		}
	} catch(Exception e) {
		e.printStackTrace();
	} finally {
		if ( rs != null )		try{rs.close();}	catch(Exception e){}
		if ( pstmt != null )	try{pstmt.close();}	catch(Exception e){}
		if ( conn != null )		try{conn.close();}	catch(Exception e){}
		if ( resource != null ) resource.release();
	}
%>

<script language="javascript">
content="";
content+="<table class='resultTable'>";
content+="	<tr>";
content+="		<th rowspan='2'>구분</th>";
content+="		<th rowspan='2'>제출업체수(A)</th>";
content+="		<th rowspan='2'>정상영업중 하도급거래업체수(B)</th>";
content+="		<th rowspan='2'>위반업체수(C)</th>";
content+="		<th rowspan='2'>미위반업체수(D)</th>";
content+="		<th colspan='3'>비율(%)</th>";
content+="		<th colspan='11'>업체별 위반행위수</th>";
content+="  </tr>";

content+="	<tr>";
content+="		<th>B/A</th>";
content+="		<th>C/B</th>";
content+="		<th>D/B</th>";
content+="		<th>1</th>";
content+="		<th>2</th>";
content+="		<th>3</th>";
content+="		<th>4</th>";
content+="		<th>5</th>";
content+="		<th>6</th>";
content+="		<th>7</th>";
content+="		<th>8</th>";
content+="		<th>9</th>";
content+="		<th>10</th>";
content+="		<th>10 초과</th>";
content+="  </tr>";

<%if( !stt.equals("start") ) {%>
content+="	<tr onMouseOver='tbRow_Over(this)' onMouseOut='tbRow_Out(this)'>";
content+="		<td rowspan='2'>계</td>";
content+="		<td rowspan='2'><%=formater2.format(tot_type)%></td>";
content+="		<td rowspan='2'><%=formater2.format(tot_subcon)%></td>";
content+="		<td rowspan='2'><%=formater2.format(tot_typ_vio)%></td>";
content+="		<td rowspan='2'><%=formater2.format(tot_subcon - tot_typ_vio)%></td>";
content+="		<td rowspan='2'><%=formater.format((float)tot_subcon/(float)tot_type*100F)%>%</td>";
content+="		<td rowspan='2'><%=formater.format((float)tot_typ_vio/(float)tot_subcon*100F)%>%</td>";
content+="		<td rowspan='2'><%=formater.format(((float)tot_subcon - (float)tot_typ_vio)/(float)tot_subcon*100F)%>%</td>";
	<%for(int i = 1; i<=11;i++) {%>
content+="		<td><%=tot_violate[i]%></td>";
	<%}%>
content+="  </tr>";

content+="	<tr onMouseOver='tbRow_Over(this)' onMouseOut='tbRow_Out(this)'>";
	<%for(int i = 1; i<=11;i++) {%>
content+="		<td><%=formater.format((float)tot_violate[i]/(float)tot_typ_vio*100F)%>%</td>";
	<%}%>
content+="  </tr>";
<%}%>

<%if( !stt.equals("start") ) {%>
	<%for(int k = 1; k <= otype_cnt; k++) {%>
content+="	<tr onMouseOver='tbRow_Over(this)' onMouseOut='tbRow_Out(this)'>";
content+="		<td rowspan='2'><%=otype[k]%></td>";
content+="		<td rowspan='2'><%=formater2.format(type_cnt[k])%></td>";
content+="		<td rowspan='2'><%=formater2.format(subcon_cnt[k])%></td>";
content+="		<td rowspan='2'><%=formater2.format(typ_vio_cnt[k])%></td>";
content+="		<td rowspan='2'><%=formater2.format(subcon_cnt[k] - typ_vio_cnt[k])%></td>";
content+="		<td rowspan='2'><%if( type_cnt[k] > 0 ) {%><%=formater.format((float)subcon_cnt[k]/(float)type_cnt[k]*100F)%>%<%} else {%>0.00%<%}%></td>";
content+="		<td rowspan='2'><%if( typ_vio_cnt[k] > 0 && subcon_cnt[k] > 0 ) {%><%=formater.format((float)typ_vio_cnt[k]/(float)subcon_cnt[k]*100F)%>%<%} else {%>0.00%<%}%></td>";
content+="		<td rowspan='2'><%if( subcon_cnt[k] - typ_vio_cnt[k] > 0 && subcon_cnt[k] > 0 ) {%><%=formater.format(((float)subcon_cnt[k] - (float)typ_vio_cnt[k])/(float)subcon_cnt[k]*100F)%>%<%} else {%>0.00%<%}%></td>";
		<%for(int i = 1; i <=11; i++) {%>
content+="		<td><%=violate_cnt[k][i]%></td>";
		<%}%>
content+="  </tr>";

content+="	<tr onMouseOver='tbRow_Over(this)' onMouseOut='tbRow_Out(this)'>";
content+="		<td><%=violate_cnt[k][1]+violate_cnt[k][2]+violate_cnt[k][3]+violate_cnt[k][4]+violate_cnt[k][5]+violate_cnt[k][6]+violate_cnt[k][7]+violate_cnt[k][8]+violate_cnt[k][9]+violate_cnt[k][10]+violate_cnt[k][11]%></td>";
content+="		<td><%=violate_cnt[k][2]+violate_cnt[k][3]+violate_cnt[k][4]+violate_cnt[k][5]+violate_cnt[k][6]+violate_cnt[k][7]+violate_cnt[k][8]+violate_cnt[k][9]+violate_cnt[k][10]+violate_cnt[k][11]%></td>";
content+="		<td><%=violate_cnt[k][3]+violate_cnt[k][4]+violate_cnt[k][5]+violate_cnt[k][6]+violate_cnt[k][7]+violate_cnt[k][8]+violate_cnt[k][9]+violate_cnt[k][10]+violate_cnt[k][11]%></td>";
content+="		<td><%=violate_cnt[k][4]+violate_cnt[k][5]+violate_cnt[k][6]+violate_cnt[k][7]+violate_cnt[k][8]+violate_cnt[k][9]+violate_cnt[k][10]+violate_cnt[k][11]%></td>";
content+="		<td><%=violate_cnt[k][5]+violate_cnt[k][6]+violate_cnt[k][7]+violate_cnt[k][8]+violate_cnt[k][9]+violate_cnt[k][10]+violate_cnt[k][11]%></td>";
content+="		<td><%=violate_cnt[k][6]+violate_cnt[k][7]+violate_cnt[k][8]+violate_cnt[k][9]+violate_cnt[k][10]+violate_cnt[k][11]%></td>";
content+="		<td><%=violate_cnt[k][7]+violate_cnt[k][8]+violate_cnt[k][9]+violate_cnt[k][10]+violate_cnt[k][11]%></td>";
content+="		<td><%=violate_cnt[k][8]+violate_cnt[k][9]+violate_cnt[k][10]+violate_cnt[k][11]%></td>";
content+="		<td><%=violate_cnt[k][9]+violate_cnt[k][10]+violate_cnt[k][11]%></td>";
content+="		<td><%=violate_cnt[k][10]+violate_cnt[k][11]%></td>";
content+="		<td><%=violate_cnt[k][11]%></td>";
content+="  </tr>";
	<%}%>
<%}%>

content+="</table>";

top.document.getElementById("divResult").innerHTML=content;
top.setNowProcessFalse();
</script>

<%@ include file="/hado/wTools/inc/WB_I_Function.jsp"%>