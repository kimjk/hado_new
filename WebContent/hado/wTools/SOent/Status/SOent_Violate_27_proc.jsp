<%@ page session="true" language="java" contentType="text/html; charset=utf-8" pageEncoding="utf-8"%><%/*** 프로젝트명	:  하도급거래 서면실태조사 지원을 위한 개발용역 사업* 프로그램명	 : SOent_Violate_27_proc.jsp																				   * 프로그램설명	: 수급사업자 > 조사결과분석 > 업체별 위반항목 내역   * 프로그램버전	: 1.0.1* 최초작성일자	: 2015년 09월 01일* 작 성 이 력       :*=========================================================*	작성일자		작성자명				내용*=========================================================*	2015-09-01	강슬기       페이지 최신화(주석, 불필요한 코드 제거, 오래된 코드 수정) *   2015-09-15   강슬기        2015년도 조사제외대상 조건 추가 *   2015-09-16   정광식       수급사업자 조건 오류 수정*   2015-09-17   정광식       2015년도 조사제외대상 조건 추가*   2016-01-06   이용광       DB변경으로 인한 인코딩 변경*//*== Update Remark =====================================================================================1. 일자 : 2012년 11월 12일2. 작성자 : (주)로티스아이 정광식3. 업데이트 내용   - db connection 개별 사용 후 리소스 반환 코딩	  - 원사업자 정보, 원사업자 응답 및 건설 업 추가	  - 쿼리생성 설명 추가=======================================================================================================*/%><%@ page import="java.sql.*"%><%@ page import="java.util.*"%><%@ page import="ftc.util.*"%><%@ page import="ftc.db.ConnectionResource"%><%@ page import="java.text.DecimalFormat"%><%@ include file="/hado/wTools/inc/WB_I_Global.jsp"%><%@ include file="/hado/wTools/inc/WB_I_chkMngSession.jsp"%><%@ include file="/hado/wTools/inc/WB_I_Function.jsp"%><%/*---------------------------------------- Variable Difinition ----------------------------------------*/	String tt = request.getParameter("tt")==null? "":request.getParameter("tt").trim();	String comm = request.getParameter("comm")==null? "":request.getParameter("comm").trim();	ConnectionResource resource = null;	Connection conn = null;	PreparedStatement pstmt = null;	ResultSet rs = null;	// 위반항목 배열	ArrayList money_nm = new ArrayList();	ArrayList money_cd = new ArrayList();	ArrayList no_money_nm = new ArrayList();	ArrayList no_money_cd = new ArrayList();	// 원사업자 위반행위수 배열	Float[] arrViolate = new Float[40];	// 수급사업자 위반행위수 배열	String[][] save_data = new String[10001][40];	Float[] arrTot = new Float[40];	String sSQLs = "";	String sSQLswhere = "";	String sOentGB = "";	String tmpStr = "";	String sTmpPMS = session.getAttribute("ckPermision") + "";	int nLoop = 1;	int i = 0;	int j = 0;	int nFieldCNTV = 0;	int money_cnt = 0;	int no_money_cnt = 0;	Float m_violate_cnt = 0F;	Float nom_violate_cnt = 0F;	int sStartYear = 2000;	// 원사업자 위반 쿼리 생성을 위한 배열	//==> 대금	ArrayList arrQCD1 = new ArrayList();	ArrayList arrQGB1 = new ArrayList();	ArrayList arrCDNM1 = new ArrayList();	ArrayList arrMoneyGB1 = new ArrayList();	ArrayList arrIDT_QCD1 = new ArrayList();	ArrayList arrIDT_QGB1 = new ArrayList();	//==> 비대금	ArrayList arrQCD2 = new ArrayList();	ArrayList arrQGB2 = new ArrayList();	ArrayList arrCDNM2 = new ArrayList();	ArrayList arrMoneyGB2 = new ArrayList();	ArrayList arrIDT_QCD2 = new ArrayList();	ArrayList arrIDT_QGB2 = new ArrayList();	/* 수급사업자 위반 쿼리 생성을 위한 배열	   1. 일자 : 2012년 11월 12일	   2. 작성자 : 정광식	   3. 비고 : 쿼리 위반항목표를 이용하여 자동 생성을 위한 배열*/	 //  대금배열	ArrayList arrIDT_SQCD1 = new ArrayList();	ArrayList arrIDT_SQGB1 = new ArrayList();	ArrayList arrSQCD1 = new ArrayList();	ArrayList arrSQGB1 = new ArrayList();	// 비대금배열 	ArrayList arrIDT_SQCD2 = new ArrayList();	ArrayList arrIDT_SQGB2 = new ArrayList();	ArrayList arrSQCD2 = new ArrayList();	ArrayList arrSQGB2 = new ArrayList();	// 쿼리 저장 배열	String sAllSumSQL = "";	String sMoneySumSQL = "";	String sBiSumSQL = "";	String sSurveySQL = "";	String sSurveySOent = "";	java.util.Calendar cal = java.util.Calendar.getInstance();	DecimalFormat formater = new java.text.DecimalFormat("###,###,###,###,###,###,###,##0.0");	DecimalFormat formater2 = new java.text.DecimalFormat("###,###,###,###,###,###,###,##0");/*-----------------------------------------------------------------------------------------------------*//*=================================== Record Selection Processing =====================================*/	String tmpYear = request.getParameter("cyear")==null? "":request.getParameter("cyear").trim();	if( !tmpYear.equals("") ) {		session.setAttribute("cyear", tmpYear);	} else {		session.setAttribute("cyear", st_Current_Year);	}	if( comm.equals("search") ) {		session.setAttribute("sgb", request.getParameter("sgb")==null? "":request.getParameter("sgb").trim());		session.setAttribute("wgb", request.getParameter("wgb")==null? "":request.getParameter("wgb").trim());		session.setAttribute("violatecomp", request.getParameter("violatecomp")==null? "":request.getParameter("violatecomp").trim());		session.setAttribute("violatecompno", request.getParameter("violatecompno")==null? "":request.getParameter("violatecompno").trim());	}	int currentYear = st_Current_Year_n;	currentYear = Integer.parseInt(session.getAttribute("cyear")+"");	int endCurrentYear = st_Current_Year_n;	if( comm.equals("search") ) {		/* 위반혐의 생성 쿼리 시작 -------------------------------------------------------------------------------------> */		// 원사업자 조사항목 설정 테이블에서 위반혐의(대금,비대금)항목 추출 쿼리		// 문항 번호등을 추출하여 배열에 저장하고 위반혐의 추출 시 인덱스로 활용		sSQLs ="SELECT Oent_Q_CD,Oent_Q_GB,Oent_Q_CDNM,Money_GB,IDentity_Q_CD,IDentity_Q_GB \n";		sSQLs+="FROM HADO_TB_Oent_Question \n";		sSQLs+="WHERE Current_Year='"+currentYear+"' \n";		sSQLs+="	AND Oent_GB='"+session.getAttribute("wgb")+"' \n";		sSQLs+="	AND (Money_GB='1' OR Money_GB='2') \n";		sSQLs+="ORDER BY Money_GB,Rank \n";		try {			resource = new ConnectionResource();			conn = resource.getConnection();			pstmt = conn.prepareStatement(sSQLs);			rs = pstmt.executeQuery();			while( rs.next() ) {				String tmp_MoneyGB = rs.getString("Money_GB").trim();				if( tmp_MoneyGB.equals("1") ) {					// 대금 위반혐의 일 경우					arrQCD1.add(rs.getString("Oent_Q_CD"));	// 문제번호 1					arrQGB1.add(rs.getString("Oent_Q_GB"));	// 문제번호 2					arrCDNM1.add(rs.getString("Oent_Q_CDNM").trim()); // 혐의내역					arrMoneyGB1.add(tmp_MoneyGB);	// 대금(1),비대금(2) 구분 (대금 세팅)					arrIDT_QCD1.add(rs.getString("Identity_Q_CD"));	// 수급사업자 연결 문제번호 1					arrIDT_QGB1.add(rs.getString("Identity_Q_GB"));	// 수급사업자 연결 문제번호 2				} else {					// 비대금 위반혐의 일 경우					arrQCD2.add(rs.getString("Oent_Q_CD"));	// 문제번호 1					arrQGB2.add(rs.getString("Oent_Q_GB")); // 문제번호 2					arrCDNM2.add(rs.getString("Oent_Q_CDNM").trim()); // 혐의내역					arrMoneyGB2.add(tmp_MoneyGB); // 대금(1),비대금(2) 구분 (비대금 세팅)					arrIDT_QCD2.add(rs.getString("Identity_Q_CD"));	// 수급사업자 연결 문제번호 1					arrIDT_QGB2.add(rs.getString("Identity_Q_GB"));	// 수급사업자 연결 문제번호 2				}			}			rs.close();		} catch(Exception e) {			e.printStackTrace();		} finally {			if(rs!=null)		try{rs.close();}	catch(Exception e){}			if(pstmt!=null)		try{pstmt.close();}	catch(Exception e){}			if(conn!=null)		try{conn.close();}	catch(Exception e){}			if(resource!=null)	resource.release();		}		/* <--------------------------------------------------------------------------------------- 위반혐의 생성 쿼리 끝 */		/* 위반혐의를 추출하기 위한 SQL 생성 시작 ----------------------------------------------------------------------> */		// 위 위반혐의 항목 및 위반문항을 저장한 배열을 이용하여 위반혐의 내역을 산출하는 SQL 생성		// 작업을 실행하기 위해서는 위반혐의 항목표(HADO_TB_Oent_Question) 가 세팅되어 있어야 함.		// 위반혐의 항목표(HADO_TB_Oent_Question)에 수급사업자 연결 문제번호 세팅 완료 후 추출 가능.		// 이곳에서는 SQL만 생성하여 하단에 데이타를 뽑기위해 생성된 SQL문 전체SQL문에 추가한다.		String tmp_IDT_QCD = "";		String tmp_IDT_QGB = "";		String prev_QCD = "";		String prev_QGB = "";		String tmp_Duble = "F";		int nWriteCnt = 0;		for(i=0; i<arrQCD1.size(); i++) {			if( !(tmp_IDT_QCD.equals(arrIDT_QCD1.get(i)+"") && tmp_IDT_QGB.equals(arrIDT_QGB1.get(i)+"")) ) {				if( !sAllSumSQL.equals("") ) { 					sAllSumSQL+="+";					sMoneySumSQL+="+";				}				sAllSumSQL+="SUM(NVL(cnt_"+arrQCD1.get(i)+arrQGB1.get(i)+",0))";				sMoneySumSQL+="SUM(NVL(cnt_"+arrQCD1.get(i)+arrQGB1.get(i)+",0))";				nWriteCnt++;			} else {				tmp_Duble = "T";				nWriteCnt = 0;			}			if( tmp_Duble.equals("T") ) {				if( !sSurveySQL.equals("") ) { 					sSurveySQL+=",";					}				sSurveySQL+="CASE SUM(CASE Oent_Q_CD WHEN "+prev_QCD+" THEN CASE WHEN Oent_Q_GB IN ("+prev_QGB+","+arrQGB1.get(i)+") THEN 1 ELSE 0 END ELSE 0 END) WHEN 2 THEN 1 WHEN 1 THEN 1 ELSE 0 END cnt_"+prev_QCD+prev_QGB+" \n";				tmp_Duble = "F";			} else if( nWriteCnt==2 ) {				if( !sSurveySQL.equals("") ) {					sSurveySQL+=",";					}				sSurveySQL+="SUM(CASE Oent_Q_CD WHEN "+prev_QCD+" THEN CASE Oent_Q_GB WHEN "+prev_QGB+" THEN 1 ELSE 0 END ELSE 0 END) cnt_"+prev_QCD+prev_QGB+" \n";				nWriteCnt = 1;			}			tmp_IDT_QCD = arrIDT_QCD1.get(i)+"";			tmp_IDT_QGB = arrIDT_QGB1.get(i)+"";			prev_QCD = arrQCD1.get(i)+"";			prev_QGB = arrQGB1.get(i)+"";		}		if( tmp_Duble.equals("T") ) {			if( !sSurveySQL.equals("") ) {				sSurveySQL+=","; 			}			sSurveySQL+="CASE SUM(CASE Oent_Q_CD WHEN "+prev_QCD+" THEN CASE WHEN Oent_Q_GB IN ("+prev_QGB+","+arrQGB1.get(arrQCD1.size()-1)+") THEN 1 ELSE 0 END ELSE 0 END) WHEN 2 THEN 1 WHEN 1 THEN 1 ELSE 0 END cnt_"+prev_QCD+prev_QGB+" \n";		} else {			if( !sSurveySQL.equals("") ) { 				sSurveySQL+=","; 			}			sSurveySQL+="SUM(CASE Oent_Q_CD WHEN "+prev_QCD+" THEN CASE Oent_Q_GB WHEN "+prev_QGB+" THEN 1 ELSE 0 END ELSE 0 END) cnt_"+prev_QCD+prev_QGB+" \n";		}		prev_QCD = "";		prev_QGB = "";		tmp_Duble = "F";		nWriteCnt = 0;		for(i=0; i<arrQCD2.size(); i++) {			if( !(tmp_IDT_QCD.equals(arrIDT_QCD2.get(i)+"") && tmp_IDT_QGB.equals(arrIDT_QGB2.get(i)+"")) ) {				if( !sAllSumSQL.equals("") ) { 					sAllSumSQL+="+";  				}				if( !sBiSumSQL.equals("") ) { 					sBiSumSQL+="+"; 				}								sAllSumSQL+="SUM(NVL(cnt_"+arrQCD2.get(i)+arrQGB2.get(i)+",0))";				sBiSumSQL+="SUM(NVL(cnt_"+arrQCD2.get(i)+arrQGB2.get(i)+",0))";				nWriteCnt++;			} else {				tmp_Duble = "T";				nWriteCnt = 0;			}						if( tmp_Duble.equals("T") ) {				if( !sSurveySQL.equals("") ) { 					sSurveySQL+=","; 				}								sSurveySQL+="CASE SUM(CASE Oent_Q_CD WHEN "+prev_QCD+" THEN CASE WHEN Oent_Q_GB IN ("+prev_QGB+","+arrQGB2.get(i)+") THEN 1 ELSE 0 END ELSE 0 END) WHEN 2 THEN 1 WHEN 1 THEN 1 ELSE 0 END cnt_"+prev_QCD+prev_QGB+" \n";				tmp_Duble = "F";			} else if( nWriteCnt==2 ) {				if( !sSurveySQL.equals("") ) { 					sSurveySQL+=","; 				}								sSurveySQL+="SUM(CASE Oent_Q_CD WHEN "+prev_QCD+" THEN CASE Oent_Q_GB WHEN "+prev_QGB+" THEN 1 ELSE 0 END ELSE 0 END) cnt_"+prev_QCD+prev_QGB+" \n";				nWriteCnt = 1;			}						tmp_IDT_QCD = arrIDT_QCD2.get(i)+"";			tmp_IDT_QGB = arrIDT_QGB2.get(i)+"";			prev_QCD = arrQCD2.get(i)+"";			prev_QGB = arrQGB2.get(i)+"";		}		if( tmp_Duble.equals("T") ) {			if( !sSurveySQL.equals("") ) { 				sSurveySQL+=","; 			}						sSurveySQL+="CASE SUM(CASE Oent_Q_CD WHEN "+prev_QCD+" THEN CASE WHEN Oent_Q_GB IN ("+prev_QGB+","+arrQGB2.get(arrQCD2.size()-1)+") THEN 1 ELSE 0 END ELSE 0 END) WHEN 2 THEN 1 WHEN 1 THEN 1 ELSE 0 END cnt_"+prev_QCD+prev_QGB+" \n";		} else {			if( !sSurveySQL.equals("") ) { 				sSurveySQL+=","; 			}						sSurveySQL+="SUM(CASE Oent_Q_CD WHEN "+prev_QCD+" THEN CASE Oent_Q_GB WHEN "+prev_QGB+" THEN 1 ELSE 0 END ELSE 0 END) cnt_"+prev_QCD+prev_QGB+" \n";		}		/* <------------------------------------------------------------------------ 위반혐의를 추출하기 위한 SQL 생성 끝 */		/* 위반혐의 항목 타이틀 세팅 시작 ------------------------------------------------------------------------------> */		sSQLs ="SELECT Oent_Q_CDNM,Rank,('['||RTRIM(MIN(Oent_Q_CD))||'-'||RTRIM(MIN(Oent_Q_GB))||']') Q_Code,Money_GB \n";		sSQLs+="FROM HADO_TB_Oent_Question \n";		sSQLs+="WHERE Oent_GB='"+session.getAttribute("wgb")+"' \n";		sSQLs+="	AND Current_Year='"+currentYear+"' \n";		sSQLs+="	AND (Money_GB='1' OR Money_GB='2') \n";		sSQLs+="GROUP BY Oent_Q_CDNM,Money_GB,Rank \n";		sSQLs+="ORDER BY Money_GB,Rank \n";//out.println(sSQLs);		i = 1;		j = 1;				try {			resource = new ConnectionResource();			conn = resource.getConnection();						pstmt = conn.prepareStatement(sSQLs);			rs = pstmt.executeQuery();						while( rs.next() ) {				tmpStr = rs.getString("Money_GB");								if( tmpStr.trim().equals("1") ) {					money_nm.add(StringUtil.checkNull(rs.getString("Oent_Q_CDNM")).trim());					money_cd.add(StringUtil.checkNull(rs.getString("Q_Code")).trim());					i++;				} else {					no_money_nm.add(StringUtil.checkNull(rs.getString("Oent_Q_CDNM")).trim());					no_money_cd.add(StringUtil.checkNull(rs.getString("Q_Code")).trim());					j++;				}			}						rs.close();					} catch(Exception e) {			e.printStackTrace();		} finally {			if(rs!=null)		try{rs.close();}	catch(Exception e){}			if(pstmt!=null)		try{pstmt.close();}	catch(Exception e){}			if(conn!=null)		try{conn.close();}	catch(Exception e){}			if(resource!=null)	resource.release();		}		money_cnt = i - 1;		no_money_cnt = j - 1;		nFieldCNTV = money_cnt + no_money_cnt;		/* <-------------------------------------------------------------------------------- 위반혐의 항목 타이틀 세팅 끝 *///System.out.println(sSurveySQL);		/* 2012년 원사업자 관련 DB Table 분리 예외처리 시작 ============================================================> */		/* 업데이트 일자 : 2012년 11월 12일		   작성자 : 정광식		   비고 : Database 성능향상을 위하여 2012년부터 원사업자 및 원사업자 응답 테이블 분리		          HADO_TB_Oent --> HADO_TB_Oent_2012, HADO_TB_Oent_Answer --> HADO_TB_Oent_Answer_2012 */		String OentInfo_TbNm = "HADO_TB_Oent";		String OentAnswer_TbNm = "HADO_TB_Oent_Answer";		if( currentYear>2011 ) {			OentInfo_TbNm = "HADO_TB_Oent_"+currentYear;			OentAnswer_TbNm = "HADO_TB_Oent_Answer_"+currentYear;		}		/* <============================================================== 2012년 원사업자 관련 DB Table 분리 예외처리 끝 */		/* 원사업자별 위반혐의 내역 생성 시작 --------------------------------------------------------------------------> */		// 생성한 위반혐의 쿼리를 추가하여 원사업자별 위반혐의 내역 Data를 추출한다.			sSQLs ="SELECT \n";		sSQLs+=sSurveySQL+" \n"; // 위반혐의쿼리 생성 추가 //		sSQLs+="FROM ( \n";		sSQLs+="	SELECT AA.Mng_No,AA.Oent_GB,AA.Oent_Q_CD,AA.Oent_Q_GB, \n";		sSQLs+="		BB.Oent_Type,BB.Oent_Name,BB.Comp_Status,BB.Oent_Status,BB.Subcon_Type,BB.Addr_Status \n";		sSQLs+="	FROM ( \n";		sSQLs+="		SELECT Mng_No,Current_Year,Oent_GB,Oent_Q_CD,Oent_Q_GB \n";		sSQLs+="		FROM ( \n";		sSQLs+="			SELECT A.Mng_No,A.Current_Year,A.Oent_GB,A.Oent_Q_CD,A.Oent_Q_GB, \n";		sSQLs+="				CASE B.Oent_GB WHEN A.Oent_GB THEN '1' ELSE '0' END CHKs \n";		sSQLs+="			FROM ( \n";		sSQLs+="				SELECT *  \n";		sSQLs+="					FROM "+OentAnswer_TbNm+" \n";		sSQLs+="					WHERE Current_Year='"+currentYear+"' \n";		sSQLs+="						AND Oent_GB='"+session.getAttribute("wgb")+"' \n";		sSQLs+="			) A LEFT JOIN ( \n";		sSQLs+="				SELECT *  \n";		sSQLs+="				FROM HADO_TB_Oent_Question  \n";		sSQLs+="				WHERE Current_Year='"+currentYear+"' \n";		sSQLs+="					AND Oent_GB='"+session.getAttribute("wgb")+"' \n";		sSQLs+="			) B \n";		sSQLs+="			ON A.Oent_GB=B.Oent_GB  \n";		sSQLs+="				AND A.Oent_Q_CD=B.Oent_Q_CD  \n";		sSQLs+="				AND A.Oent_Q_GB=B.Oent_Q_GB \n";		sSQLs+="				AND A.Current_Year=B.Current_Year \n";		sSQLs+="				AND ( NVL(A.A,'2')=NVL(B.CHK_V_A,'3') \n";		sSQLs+="				OR NVL(A.B,'2')=NVL(B.CHK_V_B,'3') \n";		sSQLs+="				OR NVL(A.C,'2')=NVL(B.CHK_V_C,'3') \n";		sSQLs+="				OR NVL(A.D,'2')=NVL(B.CHK_V_D,'3') \n";		sSQLs+="				OR NVL(A.E,'2')=NVL(B.CHK_V_E,'3') \n";		sSQLs+="				OR NVL(A.F,'2')=NVL(B.CHK_V_F,'3') \n";		sSQLs+="				OR NVL(A.G,'2')=NVL(B.CHK_V_G,'3') \n";		sSQLs+="				OR NVL(A.H,'2')=NVL(B.CHK_V_H,'3') \n";		sSQLs+="				OR NVL(A.I,'2')=NVL(B.CHK_V_I,'3') \n";		sSQLs+="				OR NVL(A.J,'2')=NVL(B.CHK_V_J,'3') \n";		sSQLs+="				OR NVL(A.K,'2')=NVL(B.CHK_V_K,'3') \n";		sSQLs+="				OR NVL(A.L,'2')=NVL(B.CHK_V_L,'3') \n";		sSQLs+="				OR NVL(A.M,'2')=NVL(B.CHK_V_M,'3') \n";		sSQLs+="				OR NVL(A.N,'2')=NVL(B.CHK_V_N,'3') ) \n";		sSQLs+="		) OentAnswer_Result \n";		sSQLs+="		WHERE CHKs='1' \n";		sSQLs+="		GROUP BY Mng_No,Current_Year,Oent_GB,Oent_Q_CD,Oent_Q_GB \n";		sSQLs+="	) AA LEFT JOIN ( \n";		sSQLs+="		SELECT *  \n";		sSQLs+="		FROM "+OentInfo_TbNm+"  \n";		sSQLs+="		WHERE Current_Year='"+currentYear+"' \n";		sSQLs+="			AND Oent_GB='"+session.getAttribute("wgb")+"' \n";		sSQLs+="	  ) BB \n";		sSQLs+="	ON AA.Mng_No=BB.Mng_No  \n";		sSQLs+="		AND AA.Current_Year=BB.Current_Year  \n";		sSQLs+="		AND AA.Oent_GB=BB.Oent_GB \n";		sSQLs+=") CCC \n";		sSQLs+="WHERE Oent_Status='1' \n";		sSQLs+="	AND Comp_Status='1' \n";		sSQLs+="	AND Subcon_Type<='2' \n";		sSQLs+="	AND Addr_Status IS NULL \n";				/* 2015-09-15 / 강슬기 / 2015년도 조사제외대상 조건 추가 		if( currentYear>=2015 ) {			sSQLs+="		AND sp_fld_03 IS NULL \n";		}		2015-09-17 / 정광식 / 원사업자에는 해당 필드 사용안하므로 삭제		if( currentYear>=2015 ) {			sSQLs+="		AND sp_fld_03 IS NULL \n";		}		*/		if( !session.getAttribute("sgb").equals("") ) {			sSQLs+="	AND Oent_Type='"+session.getAttribute("sgb")+"' \n";		}		if( !session.getAttribute("violatecomp").equals("") ) {			tmpStr = (""+session.getAttribute("violatecomp"));			sSQLs+="	AND Oent_Name LIKE '%"+tmpStr+"%' \n";		}		if( !session.getAttribute("violatecompno").equals("") ) {			sSQLs+="	AND Mng_No='"+session.getAttribute("violatecompno")+"' \n";		}		sSQLs+="GROUP BY Mng_No,Oent_Name \n";		sSQLs+="ORDER BY Mng_No \n";		for(int ni=1; ni<=39; ni++) {			arrViolate[ni] = 0F;		}//System.out.println(sSQLs);		try {			resource = new ConnectionResource();			conn = resource.getConnection();						pstmt = conn.prepareStatement(sSQLs);			rs = pstmt.executeQuery();						while( rs.next() ) {				for(int ni=1; ni <= nFieldCNTV; ni++) {					if( ni>=1 && ni <= money_cnt ) {						if(rs.getString(ni) != null ) {							if( rs.getString(ni).equals("1") ) {								arrViolate[ni] = 1F;							}						} else {							arrViolate[ni] = arrViolate[ni] + 0F;						}					} else {						if( rs.getString(ni) != null ) {							if( rs.getString(ni).equals("1") ) {								arrViolate[ni+1] = 1F;							}						} else {							arrViolate[ni+1] = arrViolate[ni+1] + 0F;						}					}				}			}						rs.close();					} catch(Exception e) {			e.printStackTrace();		} finally {			if(rs!=null)		try{rs.close();}	catch(Exception e){}			if(pstmt!=null)		try{pstmt.close();}	catch(Exception e){}			if(conn!=null)		try{conn.close();}	catch(Exception e){}			if(resource!=null)	resource.release();		}		for( int ni=1; ni<=nFieldCNTV; ni++) {			if( ni>=1 && ni<=money_cnt ) {				arrViolate[money_cnt+1] = arrViolate[money_cnt+1] + arrViolate[ni];				arrViolate[nFieldCNTV+3] = arrViolate[nFieldCNTV+3] + arrViolate[ni];			} else {				arrViolate[nFieldCNTV+2] = arrViolate[nFieldCNTV+2] + arrViolate[ni+1];				arrViolate[nFieldCNTV+3] = arrViolate[nFieldCNTV+3] + arrViolate[ni+1];			}		}		/* <---------------------------------------------------------------------------- 원사업자별 위반혐의 내역 생성 끝 */		/* 수급사업자 위반혐의 내역을 추출하기 위한 SQL문 생성 시작 ====================================================> */		/* 1. 일자 : 2012년 11월 12일		   2. 작성자 : 정광식		   3. 비고		      - 기존 년도별로 위반항목표를 별도 SQL문으로 생성하던것을 자동생성으로 변경			  - 본 쿼리생성을 위해서는 HADO_TB_Oent_Question, HADO_TB_Soent_Question 에 정보 저장이 되어 있어야 함.			  - 주의) 위반항목 중 "탈법행위"는 수급사업자에만 있으므로 원사업자 위반항목표에 추가하여야 함.			          두 테이블의 조인 조건은  Identity_q_cd 및 Identity_q_gb 필드 이므로 필히 동기화 시킬것. */		sSQLs = "SELECT * FROM ( \n"+				"	SELECT OentQ.current_year,\n"+				"		OentQ.oent_gb,\n"+				"		OentQ.identity_q_cd,\n"+				"		OentQ.identity_q_gb,\n"+				"		OentQ.oent_q_cdnm,\n"+				"		OentQ.money_gb,\n"+				"		OentQ.rank,\n"+				"		SOentQ.soent_q_cd,\n"+				"		SOentQ.soent_q_gb \n"+				"	FROM HADO_TB_Oent_Question OentQ \n"+				"	LEFT JOIN HADO_TB_Soent_Question SOentQ \n"+				"	ON OentQ.identity_q_cd=SOentQ.identity_q_cd \n"+				"		AND OentQ.identity_q_gb=SOentQ.identity_q_gb \n"+				"	    AND OentQ.current_year=SOentQ.current_year \n"+				"	    AND OentQ.oent_gb=SOentQ.oent_gb \n"+				") JQ \n"+				"WHERE current_year=? \n"+				"    AND oent_gb=? \n"+				"GROUP BY current_year,oent_gb,identity_q_cd,identity_q_gb,oent_q_cdnm,money_gb,rank,soent_q_cd,soent_q_gb \n"+				"ORDER BY money_gb,rank";		try {			resource = new ConnectionResource();			conn = resource.getConnection();			pstmt = conn.prepareStatement(sSQLs);			pstmt.setString(1, ""+currentYear);			pstmt.setString(2, session.getAttribute("wgb").toString());			rs = pstmt.executeQuery();			while( rs.next() ) {				String tmp_MoneyGB = rs.getString("Money_GB")==null ? "2":rs.getString("Money_GB").trim();				if( tmp_MoneyGB.equals("1") ) {					// 대금 위반혐의 일 경우					arrIDT_SQCD1.add(rs.getString("identity_q_cd")==null ? "":rs.getString("identity_q_cd"));					arrIDT_SQGB1.add(rs.getString("identity_q_gb")==null ? "":rs.getString("identity_q_gb"));					arrSQCD1.add(rs.getString("soent_q_cd")==null ? "":rs.getString("soent_q_cd"));	// 수급사업자 문제번호 1					arrSQGB1.add(rs.getString("soent_q_gb")==null ? "":rs.getString("soent_q_gb"));	// 수급사업자 문제번호 2				} else {					// 비대금 위반혐의 일 경우					arrIDT_SQCD2.add(rs.getString("identity_q_cd")==null ? "":rs.getString("identity_q_cd"));					arrIDT_SQGB2.add(rs.getString("identity_q_gb")==null ? "":rs.getString("identity_q_gb"));					arrSQCD2.add(rs.getString("soent_q_cd")==null ? "":rs.getString("soent_q_cd"));	// 수급사업자 문제번호 1					arrSQGB2.add(rs.getString("soent_q_gb")==null ? "":rs.getString("soent_q_gb"));	// 수급사업자 문제번호 2				}			}						rs.close();					} catch(Exception e) {			e.printStackTrace();		} finally {			if(rs!=null)		try{rs.close();}	catch(Exception e){}			if(pstmt!=null)		try{pstmt.close();}	catch(Exception e){}			if(conn!=null)		try{conn.close();}	catch(Exception e){}			if(resource!=null)	resource.release();		}		/* <====================================================== 수급사업자 위반혐의 내역을 추출하기 위한 SQL문 생성 끝 */		/* 수급사업자 위반혐의를 추출하기 위한 SQL 생성 시작 ===========================================================> */		// 1. 일자 : 2012년 11월 12일		// 2. 작업자 : 정광식		// 3. 비고 : 원사업자 쿼리생성 프로세스 그대로 사용		tmp_IDT_QCD = "99999";	// 공백인 Data 가 있으므로 임의의 값 세팅		tmp_IDT_QGB = "99999";	// 공백인 Data 가 있으므로 임의의 값 세팅		prev_QCD = "";		prev_QGB = "";		tmp_Duble = "F";		nWriteCnt = 0;		for(i=0; i<arrSQCD1.size(); i++) {			if( !(tmp_IDT_QCD.equals(arrIDT_SQCD1.get(i).toString()) && tmp_IDT_QGB.equals(arrIDT_SQGB1.get(i).toString())) ) {				nWriteCnt++;			} else {				tmp_Duble = "T";				nWriteCnt = 0;			}			if( tmp_Duble.equals("T") ) {				if( !sSurveySOent.equals("") ) { 					sSurveySOent+=","; 				}								String tmpValue = arrSQGB1.get(i).toString();								if( prev_QCD.equals("") && tmpValue.equals("") ) {					sSurveySOent+="0 \n";				} else {					sSurveySOent+="NVL(CASE SUM(CASE HADO_TB_SOent_Answer_"+currentYear+".soent_q_cd WHEN "+prev_QCD+" THEN CASE WHEN HADO_TB_SOent_Answer_"+currentYear+".soent_q_gb IN ("+prev_QGB+","+tmpValue+") THEN 1 ELSE 0 END ELSE 0 END) WHEN 2 THEN 1 WHEN 1 THEN 1 ELSE 0 END,0) \n";				}								tmp_Duble = "F";							} else if( nWriteCnt==2 ) {				if( !sSurveySOent.equals("") ) { 					sSurveySOent+=","; 				}								if( prev_QCD.equals("") ) {					sSurveySOent+="0 \n";				} else {					sSurveySOent+="NVL(SUM(CASE HADO_TB_SOent_Answer_"+currentYear+".soent_q_cd when "+prev_QCD+" THEN CASE HADO_TB_SOent_Answer_"+currentYear+".soent_q_gb WHEN "+prev_QGB+" THEN 1 ELSE 0 END ELSE 0 END),0) \n";				}								nWriteCnt = 1;			}			tmp_IDT_QCD = arrIDT_SQCD1.get(i).toString();			tmp_IDT_QGB = arrIDT_SQGB1.get(i).toString();			prev_QCD = arrSQCD1.get(i).toString();			prev_QGB = arrSQGB1.get(i).toString();		}		if( tmp_Duble.equals("T") ) {			if( !sSurveySOent.equals("") ) {				sSurveySOent+=","; 			}						String tmpValue = arrSQGB1.get(arrSQCD1.size()-1).toString();						if( prev_QCD.equals("") && tmpValue.equals("") ) {				sSurveySOent+="0 \n";			} else {				sSurveySOent+="NVL(CASE SUM(CASE HADO_TB_SOent_Answer_"+currentYear+".soent_q_cd WHEN "+prev_QCD+" THEN CASE WHEN HADO_TB_SOent_Answer_"+currentYear+".soent_q_gb IN ("+prev_QGB+","+tmpValue+") THEN 1 ELSE 0 END ELSE 0 END) WHEN 2 THEN 1 WHEN 1 THEN 1 ELSE 0 END,0) \n";			}		} else {			if( !sSurveySOent.equals("") ) { 				sSurveySOent+=","; 			}						if( prev_QCD.equals("") ) {				sSurveySOent+="0 \n";			} else {				sSurveySOent+="NVL(SUM(CASE HADO_TB_SOent_Answer_"+currentYear+".soent_q_cd when "+prev_QCD+" THEN CASE HADO_TB_SOent_Answer_"+currentYear+".soent_q_gb WHEN "+prev_QGB+" THEN 1 ELSE 0 END ELSE 0 END),0) \n";			}		}		prev_QCD = "";		prev_QGB = "";		tmp_Duble = "F";		nWriteCnt = 0;		for(i=0; i<arrSQCD2.size(); i++) {			if( !(tmp_IDT_QCD.equals(arrIDT_SQCD2.get(i).toString()) && tmp_IDT_QGB.equals(arrIDT_SQGB2.get(i).toString())) ) {				nWriteCnt++;			} else {				tmp_Duble = "T";				nWriteCnt = 0;			}			if( tmp_Duble.equals("T") ) {				if( !sSurveySOent.equals("") ) { sSurveySOent+=","; }				String tmpValue = arrSQGB2.get(i).toString();				if( prev_QCD.equals("") && tmpValue.equals("") ) {					sSurveySOent+="0 \n";				} else {					sSurveySOent+="NVL(CASE SUM(CASE HADO_TB_SOent_Answer_"+currentYear+".soent_q_cd WHEN "+prev_QCD+" THEN CASE WHEN HADO_TB_SOent_Answer_"+currentYear+".soent_q_gb IN ("+prev_QGB+","+tmpValue+") THEN 1 ELSE 0 END ELSE 0 END) WHEN 2 THEN 1 WHEN 1 THEN 1 ELSE 0 END,0) \n";				}				tmp_Duble = "F";			} else if( nWriteCnt==2 ) {				if( !sSurveySOent.equals("") ) { 					sSurveySOent+=","; 				}				if( prev_QCD.equals("") ) {					sSurveySOent+="0 \n";				} else {					sSurveySOent+="NVL(SUM(CASE HADO_TB_SOent_Answer_"+currentYear+".soent_q_cd when "+prev_QCD+" THEN CASE HADO_TB_SOent_Answer_"+currentYear+".soent_q_gb WHEN "+prev_QGB+" THEN 1 ELSE 0 END ELSE 0 END),0) \n";				}				nWriteCnt = 1;			}			tmp_IDT_QCD = arrIDT_SQCD2.get(i).toString();			tmp_IDT_QGB = arrIDT_SQGB2.get(i).toString();			prev_QCD = arrSQCD2.get(i).toString();			prev_QGB = arrSQGB2.get(i).toString();		}		if( tmp_Duble.equals("T") ) {			if( !sSurveySOent.equals("") ) { 				sSurveySOent+=","; 			}			String tmpValue = arrSQGB2.get(arrSQCD2.size()-1).toString();			if( prev_QCD.equals("") && tmpValue.equals("") ) {				sSurveySOent+="0 \n";			} else {				sSurveySOent+="NVL(CASE SUM(CASE HADO_TB_SOent_Answer_"+currentYear+".soent_q_cd WHEN "+prev_QCD+" THEN CASE WHEN HADO_TB_SOent_Answer_"+currentYear+".soent_q_gb IN ("+prev_QGB+","+tmpValue+") THEN 1 ELSE 0 END ELSE 0 END) WHEN 2 THEN 1 WHEN 1 THEN 1 ELSE 0 END,0) \n";			}		} else {			if( !sSurveySOent.equals("") ) { sSurveySOent+=","; }			if( prev_QCD.equals("") ) {				sSurveySOent+="0 \n";			} else {				sSurveySOent+="NVL(SUM(CASE HADO_TB_SOent_Answer_"+currentYear+".soent_q_cd when "+prev_QCD+" THEN CASE HADO_TB_SOent_Answer_"+currentYear+".soent_q_gb WHEN "+prev_QGB+" THEN 1 ELSE 0 END ELSE 0 END),0) \n";			}		}		/* <=========================================================== 수급사업자 위반혐의를 추출하기 위한 SQL 생성 시작 */		// 1. 일자 : 2012년 11월 12일		// 2. 작업자 : 정광식		// 3. 비고 : 위반혐의 자동 쿼리 생성으로 변경		sSQLs = "SELECT "+OentInfo_TbNm+".mng_no, HADO_TB_Subcon_"+currentYear+".Sent_Name, HADO_TB_Subcon_"+currentYear+".Child_Mng_No,";		sSQLs+=sSurveySOent;		sSQLs+="FROM HADO_TB_SOent_Answer_"+currentYear+", hado_tb_soent_question, HADO_TB_Subcon_"+currentYear+", "+OentInfo_TbNm+" ";		sSQLs+="WHERE ( HADO_TB_Subcon_"+currentYear+".oent_gb = HADO_TB_SOent_Answer_"+currentYear+".oent_gb ) and ( HADO_TB_Subcon_"+currentYear+".child_mng_no = HADO_TB_SOent_Answer_"+currentYear+".mng_no) and ";		sSQLs+="( HADO_TB_Subcon_"+currentYear+".sent_no = HADO_TB_SOent_Answer_"+currentYear+".sent_no) and ( HADO_TB_Subcon_"+currentYear+".sent_status = '1') and ";		sSQLs+="( HADO_TB_SOent_Answer_"+currentYear+".oent_gb = hado_tb_soent_question.oent_gb ) and ( HADO_TB_SOent_Answer_"+currentYear+".current_year = hado_tb_soent_question.current_year ) and "; 		sSQLs+="( "+OentInfo_TbNm+".comp_status = '1') and ( "+OentInfo_TbNm+".subcon_type <= '2') and ";		sSQLs+="( "+OentInfo_TbNm+".mng_no = HADO_TB_Subcon_"+currentYear+".mng_no ) and ( "+OentInfo_TbNm+".oent_gb = HADO_TB_Subcon_"+currentYear+".oent_gb ) and ";		sSQLs+="( HADO_TB_SOent_Answer_"+currentYear+".soent_q_cd = hado_tb_soent_question.soent_q_cd ) and ";		sSQLs+="( HADO_TB_SOent_Answer_"+currentYear+".soent_q_gb = hado_tb_soent_question.soent_q_gb ) and ";		sSQLs+="(( nvl(HADO_TB_SOent_Answer_"+currentYear+".a,2) = nvl(hado_tb_soent_question.chk_v_a,3) ) or ";		sSQLs+="( nvl(HADO_TB_SOent_Answer_"+currentYear+".b,2) = nvl(hado_tb_soent_question.chk_v_b,3) ) or ";		sSQLs+="( nvl(HADO_TB_SOent_Answer_"+currentYear+".c,2) = nvl(hado_tb_soent_question.chk_v_c,3) ) or ";		sSQLs+="( nvl(HADO_TB_SOent_Answer_"+currentYear+".d,2) = nvl(hado_tb_soent_question.chk_v_d,3) ) or ";		sSQLs+="( nvl(HADO_TB_SOent_Answer_"+currentYear+".e,2) = nvl(hado_tb_soent_question.chk_v_e,3) ) or ";		sSQLs+="( nvl(HADO_TB_SOent_Answer_"+currentYear+".f,2) = nvl(hado_tb_soent_question.chk_v_f,3) ) or ";		sSQLs+="( nvl(HADO_TB_SOent_Answer_"+currentYear+".g,2) = nvl(hado_tb_soent_question.chk_v_g,3) ) or ";		sSQLs+="( nvl(HADO_TB_SOent_Answer_"+currentYear+".h,2) = nvl(hado_tb_soent_question.chk_v_h,3) ) or ";		sSQLs+="( nvl(HADO_TB_SOent_Answer_"+currentYear+".i,2) = nvl(hado_tb_soent_question.chk_v_i,3) ) or ";		sSQLs+="( nvl(HADO_TB_SOent_Answer_"+currentYear+".j,2) = nvl(hado_tb_soent_question.chk_v_j,3) ) or ";		sSQLs+="( nvl(HADO_TB_SOent_Answer_"+currentYear+".k,2) = nvl(hado_tb_soent_question.chk_v_k,3) ) or ";		sSQLs+="( nvl(HADO_TB_SOent_Answer_"+currentYear+".l,2) = nvl(hado_tb_soent_question.chk_v_l,3) ) or ";		sSQLs+="( nvl(HADO_TB_SOent_Answer_"+currentYear+".m,2) = nvl(hado_tb_soent_question.chk_v_m,3) ) or ";		sSQLs+="( nvl(HADO_TB_SOent_Answer_"+currentYear+".n,2) = nvl(hado_tb_soent_question.chk_v_n,3) )) and HADO_TB_SOent_Answer_"+currentYear+".oent_gb = '"+session.getAttribute("wgb").toString()+"' ";		sSQLs+="AND HADO_TB_SOent_Answer_"+currentYear+".Current_Year = '" + currentYear + "' ";		if( !session.getAttribute("sgb").equals("") ) {			sSQLs+="AND "+OentInfo_TbNm+".oent_type='"+session.getAttribute("sgb")+"' ";		}		if( !session.getAttribute("violatecomp").equals("") ) {			tmpStr = (""+session.getAttribute("violatecomp"));			sSQLs+="AND "+OentInfo_TbNm+".oent_name LIKE '%"+tmpStr+"%' ";		}		if( !session.getAttribute("violatecompno").equals("") ) {			sSQLs+="AND HADO_TB_Subcon_"+currentYear+".mng_no = '"+session.getAttribute("violatecompno")+"' ";		}		/* 2015-09-17 / 정광식 / 2015년도 조사제외대상 조건 추가 */		if( currentYear>=2015 ) {			sSQLs+="AND HADO_TB_Subcon_"+currentYear+".sp_fld_03 IS NULL ";	}		sSQLs+="GROUP BY "+OentInfo_TbNm+".Mng_No, HADO_TB_Subcon_"+currentYear+".Sent_Name, HADO_TB_Subcon_"+currentYear+".Child_mng_no, HADO_TB_Subcon_"+currentYear+".sent_no \n";		sSQLs+="ORDER BY HADO_TB_Subcon_"+currentYear+".Child_mng_no";		for(int ni=1; ni<=39; ni++) {			arrTot[ni] = 0F;		}//System.out.println(sSQLs);		try {			resource = new ConnectionResource();			conn = resource.getConnection();			pstmt = conn.prepareStatement(sSQLs);			rs = pstmt.executeQuery();			i = 1;			while( rs.next() ) {				save_data[i][money_cnt+4] = "0";				save_data[i][nFieldCNTV+5] = "0";				save_data[i][nFieldCNTV+6] = "0";								for( int ni=1; ni<=nFieldCNTV+3; ni++) {//out.print("["+ni+":"+rs.getString(ni)+"]");					if( ni>=1 && ni<=money_cnt+3 ) {						tmpStr = rs.getString(ni);						if( tmpStr != null && (!tmpStr.equals("")) && (!tmpStr.equals("null")) ) {							save_data[i][ni] = rs.getString(ni).trim();							if( ni>3 ) {								save_data[i][money_cnt+4] = "" + (Float.parseFloat(save_data[i][money_cnt+4]) + Float.parseFloat(save_data[i][ni]));								save_data[i][nFieldCNTV+6] = "" + (Float.parseFloat(save_data[i][nFieldCNTV+6]) + Float.parseFloat(save_data[i][ni]));								if( save_data[i][ni].equals("1") ) {									arrTot[ni] = 1F;								}							}						} else {							save_data[i][ni] = "0";						}					} else {						tmpStr = rs.getString(ni)==null ? "":rs.getString(ni);						if( !tmpStr.equals("") ) {							save_data[i][ni+1] = tmpStr;							//save_data[i][ni+1] = new String( rs.getString(ni).trim().getBytes("ISO8859-1"), "utf-8" );							save_data[i][nFieldCNTV+5] = "" + (Float.parseFloat(save_data[i][nFieldCNTV+5]) + Float.parseFloat(save_data[i][ni+1]));							save_data[i][nFieldCNTV+6] = "" + (Float.parseFloat(save_data[i][nFieldCNTV+6]) + Float.parseFloat(save_data[i][ni+1]));							if( save_data[i][ni+1].equals("1") ) {								arrTot[ni+1] = 1F;							}						} else {							save_data[i][ni+1] = "0";						}					}				}				i++;								//out.print("<br/>");			}			rs.close();		} catch(Exception e) {			e.printStackTrace();		} finally {			if(rs!=null)		try{rs.close();}	catch(Exception e){}			if(pstmt!=null)		try{pstmt.close();}	catch(Exception e){}			if(conn!=null)		try{conn.close();}	catch(Exception e){}			if(resource!=null)	resource.release();		}		nLoop = i - 1;		for(int ni=1 ; ni <= nFieldCNTV+3; ni++) {			if( (ni>=4) && (ni<=money_cnt+3) ) {				arrTot[money_cnt+4] = arrTot[money_cnt+4] + arrTot[ni];				arrTot[nFieldCNTV+6] = arrTot[nFieldCNTV+6] + arrTot[ni];			} else if( (ni>money_cnt+3) && (ni<=nFieldCNTV+6) ) {				arrTot[nFieldCNTV+5] = arrTot[nFieldCNTV+5] + arrTot[ni+1];				arrTot[nFieldCNTV+6] = arrTot[nFieldCNTV+6] + arrTot[ni+1];			}		}	}%><meta charset="utf-8"><script type="text/javascript">//<![CDATA[content = "";content+="<table class='resultTable'>";content+="	<tr>";content+="		<th rowspan=2 colspan=3>구분</th>";content+="		<th colspan=<%=money_cnt+1%>>대금관련 위반사항</th>";content+="		<th colspan=<%=no_money_cnt+1%>>비대금관련 위반사항</th>";content+="		<th rowspan=2>계</th>";content+="	</tr>";content+="	<tr>";<%for(int ni=1; ni<=money_cnt; ni++) {%>content+="		<th><%=money_nm.get(ni-1)%></th>";<%}%>content+="		<th>소계</th>";<%for(int ni=1; ni<=no_money_cnt; ni++) {%>content+="		<th><%=no_money_nm.get(ni-1)%></th>";<%}%>content+="		<th>소계</th>";content+="	</tr>";<%if( !tt.equals("start") ) {%>content+="	<tr>";content+="		<th rowspan=<%if( sTmpPMS!=null && (sTmpPMS.equals("M") || sTmpPMS.equals("T")) ) {%><%=nLoop+3%><%} else {%>4<%}%> valign=middle>위<br>반<br>항<br>목<br>수</th>";content+="		<th colspan=2>계</th>";	<%for(int ni=1; ni<=nFieldCNTV+3; ni++) {%>		<%if( ni == (money_cnt + 1) || ni == (money_cnt + no_money_cnt + 2) || ni == (money_cnt + no_money_cnt + 3) ) {%>			<%if( ni == (money_cnt + 1) ) {%>content+="		<td><%=formater2.format(m_violate_cnt)%></td>";			<%}%>					<%if( ni == (money_cnt + no_money_cnt + 2) ) {%>content+="		<td><%=formater2.format(nom_violate_cnt)%></td>";			<%}%>							<%if( ni == (money_cnt + no_money_cnt + 3) ) {%>content+="		<td><%=formater2.format(m_violate_cnt + nom_violate_cnt)%></td>";			<%}%>				<%} else {%>			<%if( arrViolate[ni] + arrTot[ni+3] >= 1F && ni <= money_cnt ) {				m_violate_cnt = m_violate_cnt + 1F;			} else if( arrViolate[ni] + arrTot[ni+3] >= 1F && ni > money_cnt+1 && ni <= money_cnt + no_money_cnt+2 ) {				nom_violate_cnt = nom_violate_cnt + 1F;			}%>content+="		<td><%if( arrViolate[ni] + arrTot[ni+3] >= 1F ) {%>1<%} else {%>0<%}%></td>";		<%}%>	<%}%>content+="	</tr>";content+="	<tr onMouseOver='tbRow_Over(this)' onMouseOut='tbRow_Out(this)'>";content+="		<th colspan=2>원사업자 조사</td>";	<%for(int ni=1; ni<=nFieldCNTV+3; ni++) {%>content+="		<td><%if( arrViolate[ni]!=null ) {%><%=formater2.format(arrViolate[ni])%><%}%></td>";	<%}%>content+="	</tr>";content+="	<tr onMouseOver='tbRow_Over(this)' onMouseOut='tbRow_Out(this)'>";content+="		<th rowspan=<%if( sTmpPMS!=null && (sTmpPMS.equals("M") || sTmpPMS.equals("T")) ) {%><%=nLoop+1%><%} else {%>2<%}%> valign=middle>수급사업자 조사 (응답업체 기준)</th>";content+="		<th>소계</th>";	<%for(int ni=4; ni<=nFieldCNTV+6; ni++) {%>content+="		<td><%if( arrTot[ni]!=null ) {%><%=formater2.format(arrTot[ni])%><%}%></td>";	<%}%>content+="	</tr>";<%if( sTmpPMS!=null && (sTmpPMS.equals("M") || sTmpPMS.equals("T")) ) {%><%for(int ni=1; ni<=nLoop; ni++) {%>content+="	<tr onMouseOver='tbRow_Over(this)' onMouseOut='tbRow_Out(this)'>";	<%for( int k=3; k<=nFieldCNTV+6; k++) {%>		<%if( k == 3 ) {%>content+="		<th><%=save_data[ni][2]%>(<%=save_data[ni][3]%>)</th>";		<%} else {%>content+="		<td><%=formater2.format(Float.parseFloat(save_data[ni][k]))%></td>";		<%}%>	<%}%>content+="	</tr>";<%}%><%} else {%>content+="	<tr>";content+="		<td colspan=<%=nFieldCNTV+2%> style='text-align:center;'><font color=red>이하 조회권한 없음</font></td>";content+="	</tr>";<%}%><%}%>content+="</table>";top.document.getElementById("divResult").innerHTML = content;top.setNowProcessFalse();//]]</script>